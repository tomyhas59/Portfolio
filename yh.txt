React와 Redux를 사용한 이유는 무엇인가요?

React는 선언적이고 효율적인 UI를 만들기 위해 선택했습니다. Redux는 상태 관리를 위해 선택했는데, 앱의 상태를 예측 가능하게 만들고, 컴포넌트 간의 데이터 흐름을 관리하기 위해 사용합니다.

Redux Saga와 Redux Thunk의 차이는 무엇인가요?

Redux Thunk는 액션을 디스패치할 때 비동기 작업을 수행하는 데 사용되는 미들웨어입니다. Redux Saga는 더 많은 제어와 기능을 제공하는데, 제너레이터 함수를 사용하여 비동기 작업을 처리합니다.

Styled-components를 사용하는 이유는 무엇인가요?

Styled-components는 CSS-in-JS 라이브러리로, 컴포넌트 스타일링을 컴포넌트와 함께 유지보수하기 쉽게 만들어줍니다. 또한, 컴포넌트의 스타일을 동적으로 변경하기 용이하고, CSS 클래스 이름 충돌을 방지할 수 있습니다.
웹 소켓(Socket.io)을 사용한 이유는 무엇인가요?

웹 소켓을 사용하여 실시간 양방향 통신을 구현할 수 있습니다. 이는 실시간 채팅, 실시간 업데이트 등의 기능을 구현하기 용이하게 해줍니다.

React Router를 사용하는 이유는 무엇인가요?

React Router를 사용하여 클라이언트 사이드 라우팅을 구현할 수 있습니다. 이는 단일 페이지 어플리케이션(SPA)을 만들거나 사용자 경험을 향상시킬 때 유용합니다.

Express와 Sequelize를 사용하여 서버를 구축한 이유는 무엇인가요?

Express는 Node.js 웹 애플리케이션을 쉽게 만들기 위해 사용되는 강력한 프레임워크입니다. Sequelize는 Node.js 애플리케이션에서 SQL 데이터베이스를 사용하기 위한 ORM(Object-Relational Mapping) 라이브러리로, 데이터베이스 쿼리를 쉽게 작성하고 관리할 수 있습니다.

JWT(Json Web Token)를 사용하는 이유는 무엇인가요?

JWT는 사용자 인증과 권한 부여를 위한 토큰 기반의 인증 방식입니다. 클라이언트와 서버 간의 상태를 저장하지 않고도 사용자 인증을 관리할 수 있어서 효율적이고 확장성이 좋습니다.

프로젝트에서 사용한 패키지 중에서 외부 패키지를 선택한 이유는 무엇인가요?

외부 패키지를 선택한 이유는 주로 개발 생산성 향상, 기능 추가, 코드의 유지보수성 등입니다. 예를 들어, FontAwesome는 아이콘을 쉽게 사용할 수 있도록 도와주고, Moment.js는 시간과 날짜를 다루는데 유용합니다.

개발 환경에서 사용한 특정 브라우저의 버전을 선택한 이유는 무엇인가요?

개발 환경에서 특정 브라우저의 최신 버전을 선택하는 것은 대부분 사용자 경험을 개선하고, 특정 기능을 지원하기 위함입니다. 일반적으로 가장 최신 버전과 이전 버전을 지원하게끔 선택됩니다.

프로젝트에서 발생했던 어려움과 그를 해결하기 위한 접근 방식은 무엇이었나요?

예를 들어, 특정 기능을 구현하는 데 어려움이 있었다면, 해당 기능을 구현하기 위해 문서를 찾거나 커뮤니티에서 도움을 요청하는 등의 방법을 사용했을 것입니다. 이를 통해 효율적인 문제 해결과 지식 습득을 할 수 있었습니다.

Next.js를 선택한 이유는 무엇인가요?

Next.js는 React 애플리케이션을 쉽게 구축할 수 있게 해주는 프레임워크로, 서버 사이드 렌더링(SSR), 정적 사이트 생성(SSG), API 라우팅 등의 기능을 제공하여 개발 생산성을 높여줍니다.

Recoil을 사용한 이유는 무엇인가요?

Recoil은 React 애플리케이션의 전역 상태 관리를 위한 라이브러리입니다. 기존의 Redux나 Context API보다 사용이 간편하고 성능도 우수하기 때문에 선택했습니다.

Firebase를 어떤 용도로 사용했나요?

Firebase는 백엔드 없이도 앱을 빠르게 개발하고 배포할 수 있는 플랫폼으로, 주로 사용자 인증, 데이터베이스, 스토리지, 애널리틱스 등의 기능을 활용했습니다.

GraphQL과 REST API 중에 왜 GraphQL을 선택했나요?

GraphQL은 클라이언트가 필요한 데이터를 직접 요청할 수 있는 유연한 쿼리 언어로, REST API에 비해 더 효율적이고 강력한 기능을 제공합니다. 또한, 한 번의 요청으로 여러 데이터를 가져올 수 있어 네트워크 트래픽을 줄일 수 있습니다.

SASS와 CSS의 차이점은 무엇인가요?

SASS는 CSS의 확장된 문법을 제공하여 변수, 중첩 규칙, 믹스인 등의 기능을 사용할 수 있습니다. 이를 통해 코드의 재사용성을 높이고 유지보수를 용이하게 합니다.

Next.js에서 Static Generation과 Server-side Rendering의 차이는 무엇인가요?

Static Generation은 빌드 시점에 페이지를 렌더링하여 정적 파일로 생성하는 방식이고, Server-side Rendering은 각 요청마다 서버에서 페이지를 렌더링하는 방식입니다. Static Generation은 빠르고 캐시할 수 있지만, 데이터가 자주 변경되는 경우에는 Server-side Rendering이 적합합니다.

Firebase의 보안 설정에 대해 설명해주세요.

Firebase는 기본적으로 보안 규칙을 설정할 수 있으며, Firebase Authentication을 사용하여 사용자 인증을 처리할 수 있습니다. 또한, Firebase Security Rules을 사용하여 데이터베이스 및 스토리지 액세스를 제어할 수 있습니다.

Typescript를 사용한 이유는 무엇인가요?

Typescript는 정적 타입을 지원하여 코드의 안정성을 높이고 개발자의 실수를 줄일 수 있습니다. 또한, 코드 자동 완성과 리팩토링 등의 개발자 경험을 향상시키는 기능을 제공합니다.

Next.js에서의 페이지 라우팅 방식에 대해 설명해주세요.

Next.js는 파일 시스템을 기반으로 페이지 라우팅을 자동으로 처리합니다. 페이지는 pages 디렉토리 내의 파일로 정의되며, 파일 경로에 따라 URL이 자동으로 매핑됩니다.


